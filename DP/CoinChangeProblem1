/* coin change problem - 1

http://www.geeksforgeeks.org/dynamic-programming-set-7-coin-change/

To count total number solutions, we can divide all set solutions in two sets.
1) Solutions that do not contain mth coin (or Sm).
2) Solutions that contain at least one Sm.
Let count(S[], m, n) be the function to count the number of solutions, then it can be written as sum of count(S[], m-1, n) and count(S[], m, n-Sm).

*/

public static int coinChange(int [] S,int n)
{
	if(n==0)
		return 0;

	int m = S.length;

	int t[][]= new int[n+1][m];
	for(int i=0;i<m;i++)
		t[0][i] = 1;

	for(int i=1;i<=n;i++)
	{
		for(int j=0;j<m;j++)
		{	
			// count considering S[j] 
			int x = (i-S[j]>=0)? table[i-S[j]][j]:0;

			// count by not considering S[j]
			int y = (j>=1)? table[i][j-1]:0;

			table[i][j] = x+y;
		}
	}

	return table[n][m-1];

}