/* Longest common subsequence
Given 2 strings of length m and n , return the longest common subsequence

Recurance relation

LCS(i,j) 
			= 1+LCS(i-1,j-1) if (A[i]==A[j])
			= MAX(LCS(i,j-1),LCS(i-1,j)) if (A[i]!=A[j])

//http://www.geeksforgeeks.org/dynamic-programming-set-4-longest-common-subsequence/

*/

public static int longestCommonSubsequence(String s1,String s2)
{
	int m = s1.length;
	int n = s2.length;

	if(m==0 || n==0)
		return 0;

	int LCS[][] = new int[m+1][n+1];

	for(int i=0;i<m+1;i++)
		LCS[i][0] = 0;
	
	for(int i=0;i<n+1;i++)
		LCS[0][i] = 0;

	for(int i =1;i<=m;i++)
		for(int j=1;j<=n;j++)
		{
			if(s1.charAt(i)==s2.charAt(j))
			{
				LCS[i][j] = 1+LCS[i-1][j-1];	
			}
			else
			{
				LCS[i][j] = Math.max(LCS[i][j-1],LCS[i-1][j]);
			}
		}

	return LCS[m][n];
}


