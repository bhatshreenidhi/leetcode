/*
Longest increasing subsequence - Not necessary to be continuous

Example :
 3 2 6 4 5 1
Increasing subsequences
-> (3,6) (2,6)  (4, 5)  (2,4,5)    (3,4,5)
Find the longest increasing subsequences

https://www.youtube.com/watch?v=4fQJGoeW5VE

Brute forces Is - O(2^n)
Try all possible combinations.

Using DP.
At every position, u will check from the beginning the total length of the increasing subsequence and fill it in an array.
	
Max of array is the output
*/

public static int longestSubsequece(int[] num)
{
	if(num==null || num.length==0)
		return 0;

	int len = num.length;

	//Take an auxillary array L[]
	//L[i] will represent the length of the maximum increasing subsequence from 0 to i
	int L[] = new L[len]();

	for(int i=0;i<len;i++)
		L[i] = 1;

	for(int i=1;i<len;i++)
		for(int j=0;j<i;j++)
		{
			if(num[i]>num[j] && L[i]<L[j]+1)
				L[i]=L[j]+1;
		}

	int max = num[0];
	for(int i=1;i<len;i++)
	{
		if(num[i]>max)
			max = num[i];
	}

	return max;
	
}
